name: CI

on:
  push:
  pull_request:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # Enforces the consistency of code formatting using `.editorconfig` and the `dotnet-format` tool.
  check-format:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET SDK v5.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Restore tools
        run: dotnet tool restore
      - name: Check format
        run: dotnet format --check

  Consul_AspNetCore:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-2019, macos-10.15]
        framework: [netcoreapp3.1, net5.0]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK v3.1.x
        if: matrix.framework == 'netcoreapp3.1'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
      - name: Setup .NET SDK v5.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Build
        run: dotnet build Consul.AspNetCore.Test --configuration=Release --framework=${{ matrix.framework }}
      - name: Run tests
        shell: bash
        run: dotnet test Consul.AspNetCore.Test --configuration=Release --logger "GitHubActions;report-warnings=false" --no-build -v=Normal --framework=${{ matrix.framework }}
  Consul:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    strategy:
      matrix:
        consul: [1.6.10, 1.7.14, 1.8.13, 1.9.7, 1.10.0]
        framework: [net461, netcoreapp2.1, netcoreapp3.1, net5.0]
        os: [ubuntu-18.04, windows-2019, macos-10.15]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK v2.1.x
        if: matrix.framework == 'netcoreapp2.1'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 2.1.x
      - name: Setup .NET Core SDK v3.1.x
        if: matrix.framework == 'netcoreapp3.1'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
      - name: Setup .NET SDK v5.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Download Consul
        shell: bash
        run: |
          cd Consul.Test
          SYSTEM=$(uname | sed 's/MINGW.*/windows/' | tr A-Z a-z)
          curl -sSL https://releases.hashicorp.com/consul/${{ matrix.consul }}/consul_${{ matrix.consul }}_${SYSTEM}_amd64.zip -o consul.zip
          unzip consul.zip
          rm consul.zip
      - name: Build
        run: dotnet build Consul.Test --configuration=Release --framework=${{ matrix.framework }}
      - name: Run tests
        shell: bash
        run: |
          ./Consul.Test/consul agent -dev -config-file Consul.Test/test_config.json -log-file consul.log >consul-stdout.log 2>consul-stderr.log &
          dotnet test Consul.Test --configuration=Release --logger "GitHubActions;report-warnings=false" --no-build -v=Normal --framework=${{ matrix.framework }}
      - name: Upload Consul logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: consul-logs-${{ matrix.consul }}-${{ matrix.framework }}-${{ matrix.os }}
          path: consul*.log

  package:
    runs-on: windows-2019
    needs: [Consul_AspNetCore, Consul]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET SDK v5.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Create NuGet packages
        run: |
          if (-not ("${{ github.ref }}" -like "refs/tags/v*")) {
            $suffix = "preview-$(Get-Date -Format yyyyMMddHHmmss -AsUTC)-$(git rev-parse --short HEAD)"
            $params = "--version-suffix", $suffix
          }

          dotnet pack --configuration=Release --output dist @params

          if ("${{ github.ref }}" -like "refs/tags/v*") {
              $tag = "${{ github.ref }}".SubString(11)
              $expectedConsulFile = "dist/Consul.$tag.nupkg"
              $expectedConsulAspNetCoreFile = "dist/Consul.AspNetCore.$tag.nupkg"

              # Check whether the tag and the package version match together
              if (-not (Test-Path -Path $expectedConsulFile)) {
                  echo "::error ::Expected file $expectedConsulFile doesn't exist"
                  exit 1
              }
              if (-not (Test-Path -Path $expectedConsulAspNetCoreFile)) {
                  echo "::error ::Expected file $expectedConsulAspNetCoreFile doesn't exist"
                  exit 1
              }
          }
      - name: Upload NuGet package artifacts
        uses: actions/upload-artifact@v2
        with:
          name: nuget-packages
          path: dist/*.nupkg

  # Publish NuGet packages to the preview feed when there is a push to master.
  # Tests need to succeed for all components and on all platforms first.
  publish-preview:
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/master' }}
    needs: package
    runs-on: ubuntu-18.04
    steps:
      - name: Download NuGet package artifacts
        uses: actions/download-artifact@v2
        with:
          name: nuget-packages
          path: dist
      - name: Publish to NuGet
        run: dotnet nuget push "dist/Consul.*.nupkg" --api-key ${{ secrets.FEEDZIO_API_KEY }} --source https://f.feedz.io/consuldotnet/preview/nuget/index.json

  # Publish NuGet packages when a tag is pushed.
  # Tests need to succeed for all components and on all platforms first,
  # including having a tag name that matches the version number.
  publish-release:
    if: ${{ !github.event.repository.fork && startsWith(github.ref, 'refs/tags/v') }}
    needs: package
    runs-on: ubuntu-18.04
    steps:
      - name: Download NuGet package artifacts
        uses: actions/download-artifact@v2
        with:
          name: nuget-packages
          path: dist
      - name: Publish to NuGet
        run: dotnet nuget push "dist/Consul.*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
