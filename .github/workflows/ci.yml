name: CI

on:
  push:
  pull_request:

env:
  CONSUL_VERSION: 1.6.1

jobs:

  # Enforces the consistency of code formatting using `.editorconfig` and the `dotnet-format` tool.
  check-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.300
      - name: Restore tools
        run: dotnet tool restore
      - name: Check format
        run: dotnet format --check

  # Build and test on all major platforms.
  # Repack to avoid Newtonsoft.Json dependency in .NET Framework (This is to
  # prevent issues with mismatched JSON.NET versions in user projects).
  # Create a NuGet package on Windows only, as we build for .NET Framework 4.6.1
  # and for .NET Standard 2.0.
  build:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        if: runner.os != 'Windows'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.300
      - name: Download Consul
        shell: bash
        run: |
          cd Consul.Test
          SYSTEM=$(uname | sed 's/MINGW.*/windows/' | tr A-Z a-z)
          curl -sSL https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_${SYSTEM}_amd64.zip -o consul.zip
          unzip consul.zip
          rm consul.zip
      - name: Build
        run: dotnet build --configuration=Release -p:TreatWarningsAsErrors=true
      - name: Repack
        if: runner.os == 'Windows'
        run: |
          cd Consul/bin/Release
          mv net461 net461unmerged
          cd net461unmerged
          &$HOME/.nuget/packages/ilrepack/2.0.18/tools/ilrepack.exe /keyfile:${{ github.workspace }}/assets/consuldotnet.snk /parallel /internalize /out:../net461/Consul.dll Consul.dll Newtonsoft.Json.dll
          cd ..
          cp net461unmerged/Consul.pdb net461/
          rm -r net461unmerged
      - name: Run tests
        shell: bash
        run: |
          cd Consul.Test
          ./consul agent -dev -config-file test_config.json &
          dotnet test --configuration=Release --no-build -v=Normal
      - name: Create NuGet package
        if: runner.os == 'Windows'
        run: |
          if ("${{ github.ref }}" -like "refs/tags/v*") {
            $tag = "${{ github.ref }}".SubString(11)
            $version = (Select-Xml -path Consul/Consul.csproj -XPath "/Project/PropertyGroup/VersionPrefix/text()").node.Value
            if (-not ($tag -eq $version)) {
              echo "There is a mismatch between the project version ($version) and the tag ($tag)"
              exit 1
            }
          } else {
            # WORKAROUND: Add letter prefix to ensure that MSBuild treats
            # the suffix as a string. e.g. '0313071' will fail as an invalid
            # version string, but 'G0313071' will succeeded. It looks like
            # the parser does not like numbers with a leading zero.
            $suffix = 'g' + $(git rev-parse --short HEAD)
            $params = "--version-suffix", $suffix
          }
          dotnet pack --configuration=Release --no-build @params Consul/Consul.csproj
      - name: Upload NuGet package artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: nuget-package
          path: dist/consul

  # Publish NuGet package when a tag is pushed.
  # Tests need to succeed on all platforms first, including having a tag name that matches the version number.
  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v2
        with:
          name: nuget-package
          path: dist/consul
      - name: Publish to NuGet
        shell: bash
        run: dotnet nuget push dist/consul/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
